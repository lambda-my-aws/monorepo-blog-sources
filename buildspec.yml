---
# Buildspec for amazoncorretto Java SDK

version: 0.2
env:
  shell: /bin/bash

batch:
  fast-fail: true
  build-graph:
    - identifier: app01
      ignore_failure: false
      env:
        compute-type: BUILD_GENERAL1_SMALL
        privileged-mode: false
        variables:
          REPO_NAME: app01
          SERVICE_NAME: app01
      buildspec: buildspec_java_apps.yml
      ignore-failure: false
    - identifier: app02
      ignore_failure: false
      env:
        compute-type: BUILD_GENERAL1_SMALL
        privileged-mode: false
        variables:
          REPO_NAME: app02
          SERVICE_NAME: app02
      buildspec: buildspec_java_apps.yml
      ignore-failure: false
    - identifier: composex
      ignore_failure: false
      depend-on:
        - app01
        - app02
      env:
        compute-type: BUILD_GENERAL1_SMALL
        privileged-mode: true

phases:
  install:
    commands:
      - if [ -z ${AWS_ACCOUNT_ID+x} ]; then AWS_ACCOUNT_ID=$(aws sts get-caller-identity | jq -r .Account); fi
      - REGISTRY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION:-$AWS_DEFAULT_REGION}.amazonaws.com/
      - (pip --version && pip install pip -U) || curl https://bootstrap.pypa.io/get-pip.py | python
      - pip install awscli docker-compose -U
      - pip install ecs_composex

  pre_build:
    commands:
      - echo Login to own ECR registry
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${REGISTRY_URI}
      - COMMIT_HASH=${CODEBUILD_RESOLVED_SOURCE_VERSION::7}
      - EPOCH=`date +'%s'`
      - IMAGE_TAG=${COMMIT_HASH:=$EPOCH}
      - echo Docker repository $REPOSITORY_URI
      - echo Docker image tag $IMAGE_TAG

  build:
    commands:
      # For each service defined in the docker-compose files we try to find the expected JAR file for it.
      - |
          for service in `docker-compose config --services 2>/dev/null`; do
          shortname=`echo $service | sed s'/[^a-zA-Z0-9]//g'`
          dir_env_name="CODEBUILD_SRC_DIR_${shortname}_AppDefinition"
          if ! [ -d ${!dir_env_name} ]; then echo "No output found for $service"; echo ${!dir_env_name}; exit 1 ; fi
          find ${!dir_env_name} -type f -name "${service}*.jar" | ( read path; cp $path ${service}/app.jar ) ;
          done
      # Troubleshooting to verify our source files made it as we expected
      - |
          for service in `docker-compose config --services 2>/dev/null`; do
            ls $service;
          done
      - docker-compose build
      - docker-compose push

  post_build:
    commands:
      - echo "Successful build"
      - echo "Generating CFN configs and template"
      - |
          if ! [ -d outputs ]; then mkdir -p outputs/{dev/stg/prod}; else find outputs -type f -print -delete ; fi
      - |
          ecs-composex create -n ${DEPLOYMENT_NAME} --format yaml -f docker-compose.yml -f envs/dev.yml \
          -b ${CFN_TPL_BUCKET} -d outputs/dev/
      - |
          ecs-composex create -n ${DEPLOYMENT_NAME} --format yaml -f docker-compose.yml -f envs/stg.yml \
          -b ${CFN_TPL_BUCKET} -d outputs/stg/
    finally:
      - rm -rfv $HOME/.docker

artifacts:
  files:
    - "**/*"
  discard-paths: no
  base-directory: "outputs"
